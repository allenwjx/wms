/**
 * Jungle.com Inc.
 * Copyright (c) 2004-2018 All Rights Reserved.
 */ 
package com.zeh.wms.dal.ibatis;

import com.zeh.wms.dal.operation.freight.*;
import com.zeh.wms.dal.dataobject.*;


import java.io.*;
import java.net.*;
import java.util.*;

import java.math.BigDecimal;
import java.math.BigInteger;

import com.zeh.jungle.dal.paginator.PageQuery;
import com.zeh.jungle.dal.paginator.PageList;
import com.zeh.jungle.dal.paginator.PageQueryUtils;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.zeh.wms.dal.dataobject.FreightDO;
import com.zeh.wms.dal.daointerface.FreightDAO;

/**
 * FreightDAO
 * database table: freight
 * database table comments: Freight
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/dalgen</tt>
 * 
 * @author Allen Wang(Wang Junxiang)
 * */
public class IbatisFreightDAO extends SqlMapClientDaoSupport implements FreightDAO {


	/**
	 * 
	 * sql: 
	 * <pre>INSERT      INTO         freight         (             province_code, express_code, first_weight, first_original_price,             additional_original_price, first_cost_price, additional_cost_price, enabled, gmt_create,             gmt_modified, create_by, modify_by             )      VALUES         (?,?,?,?,?,?,?,?,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,?,?)</pre>
	 */
	public long insert(FreightDO freight) throws DataAccessException {
		if(freight == null) {
			throw new IllegalArgumentException("Can't insert a null data object into db.");
		}
		getSqlMapClientTemplate().insert("wms.Freight.insert", freight);
		return freight.getId();
	}

	/**
	 * 
	 * sql: 
	 * <pre>DELETE      FROM         freight      WHERE         id = ?</pre>
	 */
	public int delete(Long id) throws DataAccessException {
		return getSqlMapClientTemplate().delete("wms.Freight.delete", id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>UPDATE         freight      SET         province_code = ? ,             express_code = ?,             first_weight = ? ,             first_original_price = ? ,             additional_original_price = ? ,             first_cost_price = ?,             additional_cost_price = ?,             enabled = ?,             gmt_modified = CURRENT_TIMESTAMP,             modify_by = ?                   WHERE         id = ?</pre>
	 */
	public int update(FreightDO freight) throws DataAccessException {
		if(freight == null) {
			throw new IllegalArgumentException("Can't update by a null data object.");
		}
		return getSqlMapClientTemplate().update("wms.Freight.update", freight);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, province_code, express_code, first_weight, first_original_price,         additional_original_price, first_cost_price, additional_cost_price, enabled, gmt_create,         gmt_modified, create_by, modify_by                       FROM         freight                  WHERE         id = ?</pre>
	 */
	public FreightDO queryById(Long id) throws DataAccessException {
		return (FreightDO)getSqlMapClientTemplate().queryForObject("wms.Freight.queryById",id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, province_code, express_code, first_weight, first_original_price,         additional_original_price, first_cost_price, additional_cost_price, enabled, gmt_create,         gmt_modified, create_by, modify_by                       FROM         freight                  WHERE         province_code = ?          AND express_code = ?          AND enabled = 1</pre>
	 */
	public FreightDO queryByExpressAndProvince(Long provinceCode ,String expressCode) throws DataAccessException {
		Map<String,Object> param = new HashMap<String,Object>();
		param.put("provinceCode",provinceCode);
		param.put("expressCode",expressCode);
		return (FreightDO)getSqlMapClientTemplate().queryForObject("wms.Freight.queryByExpressAndProvince",param);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, province_code, express_code, first_weight, first_original_price,         additional_original_price, first_cost_price, additional_cost_price, enabled, gmt_create,         gmt_modified, create_by, modify_by                       FROM         freight                  WHERE         1=1                                        AND                      province_code = ?                                            AND                      express_code = ?                                            AND                      enabled = ?                                                ORDER BY         gmt_modified DESC</pre>
	 */
	public PageList<FreightDO> queryByPage(QueryByPageQuery param) throws DataAccessException {
		return PageQueryUtils.pageQuery(getSqlMapClientTemplate(),"wms.Freight.queryByPage",param);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, province_code, express_code, first_weight, first_original_price,         additional_original_price, first_cost_price, additional_cost_price, enabled, gmt_create,         gmt_modified, create_by, modify_by                       FROM         freight                  WHERE         enabled = 1;</pre>
	 */
	public List<FreightDO> queryAllEnabled() throws DataAccessException {
		return (List<FreightDO>)getSqlMapClientTemplate().queryForList("wms.Freight.queryAllEnabled",null);
	}

}

