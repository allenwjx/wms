/**
 * Jungle.com Inc.
 * Copyright (c) 2004-2018 All Rights Reserved.
 */ 
package com.zeh.wms.dal.ibatis;

import com.zeh.jungle.dal.paginator.PageList;
import com.zeh.jungle.dal.paginator.PageQueryUtils;
import com.zeh.wms.dal.daointerface.ExpresDAO;
import com.zeh.wms.dal.dataobject.ExpresDO;
import com.zeh.wms.dal.operation.expres.QueryByPageQuery;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import java.util.List;

/**
 * ExpresDAO
 * database table: express
 * database table comments: Expres
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/dalgen</tt>
 * 
 * @author Allen Wang(Wang Junxiang)
 * */
public class IbatisExpresDAO extends SqlMapClientDaoSupport implements ExpresDAO {


	/**
	 * 
	 * sql: 
	 * <pre>INSERT      INTO         express         (             name, code, gmt_create, gmt_modified, create_by, modify_by             )      VALUES         (?,?,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,?,?)</pre>
	 */
	public long insert(ExpresDO expres) throws DataAccessException {
		if(expres == null) {
			throw new IllegalArgumentException("Can't insert a null data object into db.");
		}
		getSqlMapClientTemplate().insert("wms.Expres.insert", expres);
		return expres.getId();
	}

	/**
	 * 
	 * sql: 
	 * <pre>DELETE      FROM         express      WHERE         id = ?</pre>
	 */
	public int delete(Long id) throws DataAccessException {
		return getSqlMapClientTemplate().delete("wms.Expres.delete", id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>UPDATE         express      SET         name=?, code = ?,gmt_modified = CURRENT_TIMESTAMP ,modify_by = ?                  WHERE         id = ?</pre>
	 */
	public int update(ExpresDO expres) throws DataAccessException {
		if(expres == null) {
			throw new IllegalArgumentException("Can't update by a null data object.");
		}
		return getSqlMapClientTemplate().update("wms.Expres.update", expres);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, name, code, gmt_create, gmt_modified, create_by, modify_by                       FROM         express                  WHERE         id = ?</pre>
	 */
	public ExpresDO queryById(Long id) throws DataAccessException {
		return (ExpresDO)getSqlMapClientTemplate().queryForObject("wms.Expres.queryById",id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, name, code, gmt_create, gmt_modified, create_by, modify_by                       FROM         express                  WHERE         code = ?</pre>
	 */
	public ExpresDO queryByCode(String code) throws DataAccessException {
		return (ExpresDO)getSqlMapClientTemplate().queryForObject("wms.Expres.queryByCode",code);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, name, code, gmt_create, gmt_modified, create_by, modify_by                       FROM         express                  WHERE         1=1                                        AND                      code = ?                                            AND                      name = ?                                                ORDER BY         gmt_modified DESC</pre>
	 */
	public PageList<ExpresDO> queryByPage(QueryByPageQuery param) throws DataAccessException {
		return PageQueryUtils.pageQuery(getSqlMapClientTemplate(),"wms.Expres.queryByPage",param);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, name, code, gmt_create, gmt_modified, create_by, modify_by                       FROM         express</pre>
	 */
	public List<ExpresDO> queryAll() throws DataAccessException {
		return (List<ExpresDO>)getSqlMapClientTemplate().queryForList("wms.Expres.queryAll",null);
	}

}

