/**
 * Jungle.com Inc.
 * Copyright (c) 2004-2018 All Rights Reserved.
 */ 
package com.zeh.wms.dal.ibatis;

import com.zeh.jungle.dal.paginator.PageList;
import com.zeh.jungle.dal.paginator.PageQueryUtils;
import com.zeh.wms.dal.daointerface.ExpressOrderItemDAO;
import com.zeh.wms.dal.dataobject.ExpressOrderItemDO;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import java.util.List;

/**
 * ExpressOrderItemDAO
 * database table: express_order_item
 * database table comments: ExpressOrderItem
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/dalgen</tt>
 * 
 * @author Allen Wang(Wang Junxiang)
 * */
public class IbatisExpressOrderItemDAO extends SqlMapClientDaoSupport implements ExpressOrderItemDAO {


	/**
	 * 
	 * sql: 
	 * <pre>INSERT      INTO         express_order_item         (           id ,order_no ,item_name ,item_code ,relation_code ,quantity ,unit ,unit_price ,unit_weight ,total_weight ,total_price ,gmt_create ,gmt_modified ,create_by ,modify_by           )      VALUES         (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)</pre>
	 */
	public long insert(ExpressOrderItemDO expressOrderItem) throws DataAccessException {
		if(expressOrderItem == null) {
			throw new IllegalArgumentException("Can't insert a null data object into db.");
		}
		getSqlMapClientTemplate().insert("wms.ExpressOrderItem.insert", expressOrderItem);
		return expressOrderItem.getId();
	}

	/**
	 * 
	 * sql: 
	 * <pre>DELETE      FROM         express_order_item      WHERE         id = ?</pre>
	 */
	public int delete(Long id) throws DataAccessException {
		return getSqlMapClientTemplate().delete("wms.ExpressOrderItem.delete", id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>UPDATE         express_order_item      SET         order_no = ? ,item_name = ? ,item_code = ? ,relation_code = ? ,quantity = ? ,unit = ? ,unit_price = ? ,unit_weight = ? ,total_weight = ? ,total_price = ? ,gmt_create = ? ,gmt_modified = ? ,create_by = ? ,modify_by = ?                WHERE         id = ?</pre>
	 */
	public int update(ExpressOrderItemDO expressOrderItem) throws DataAccessException {
		if(expressOrderItem == null) {
			throw new IllegalArgumentException("Can't update by a null data object.");
		}
		return getSqlMapClientTemplate().update("wms.ExpressOrderItem.update", expressOrderItem);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, order_no, item_name, item_code, relation_code, quantity, unit, unit_price, unit_weight, total_weight, total_price, gmt_create, gmt_modified, create_by, modify_by                  FROM         express_order_item                WHERE         id = ?</pre>
	 */
	public ExpressOrderItemDO queryById(Long id) throws DataAccessException {
		return (ExpressOrderItemDO)getSqlMapClientTemplate().queryForObject("wms.ExpressOrderItem.queryById",id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, order_no, item_name, item_code, relation_code, quantity, unit, unit_price, unit_weight, total_weight, total_price, gmt_create, gmt_modified, create_by, modify_by            FROM         express_order_item</pre>
	 */
	public PageList<ExpressOrderItemDO> findPage(int pageSize,int pageNum) throws DataAccessException {
		return PageQueryUtils.pageQuery(getSqlMapClientTemplate(),"wms.ExpressOrderItem.findPage",null,pageNum,pageSize);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, order_no, item_name, item_code, relation_code, quantity, unit, unit_price, unit_weight, total_weight, total_price, gmt_create, gmt_modified, create_by, modify_by            FROM         express_order_item         WHERE         order_no = ?</pre>
	 */
	public List<ExpressOrderItemDO> getItemByOrderNo(String orderNo) throws DataAccessException {
		return (List<ExpressOrderItemDO>)getSqlMapClientTemplate().queryForList("wms.ExpressOrderItem.getItemByOrderNo",orderNo);
	}

}

