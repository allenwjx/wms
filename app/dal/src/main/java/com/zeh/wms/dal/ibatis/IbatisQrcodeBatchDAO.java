/**
 * Jungle.com Inc.
 * Copyright (c) 2004-2018 All Rights Reserved.
 */ 
package com.zeh.wms.dal.ibatis;

import com.zeh.wms.dal.operation.qrcodebatch.*;
import com.zeh.wms.dal.dataobject.*;


import java.io.*;
import java.net.*;
import java.util.*;

import java.math.BigDecimal;
import java.math.BigInteger;

import com.zeh.jungle.dal.paginator.PageQuery;
import com.zeh.jungle.dal.paginator.PageList;
import com.zeh.jungle.dal.paginator.PageQueryUtils;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.zeh.wms.dal.dataobject.QrcodeBatchDO;
import com.zeh.wms.dal.daointerface.QrcodeBatchDAO;

/**
 * QrcodeBatchDAO
 * database table: qrcode_batch
 * database table comments: QrcodeBatch
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/dalgen</tt>
 * 
 * @author Allen Wang(Wang Junxiang)
 * */
public class IbatisQrcodeBatchDAO extends SqlMapClientDaoSupport implements QrcodeBatchDAO {


	/**
	 * 
	 * sql: 
	 * <pre>INSERT      INTO         qrcode_batch         (             id ,batch_serial ,qrcode_serial ,state ,gmt_create ,gmt_modified             )      VALUES         (?,?,?,?,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP)</pre>
	 */
	public long insert(QrcodeBatchDO qrcodeBatch) throws DataAccessException {
		if(qrcodeBatch == null) {
			throw new IllegalArgumentException("Can't insert a null data object into db.");
		}
		getSqlMapClientTemplate().insert("wms.QrcodeBatch.insert", qrcodeBatch);
		return qrcodeBatch.getId();
	}

	/**
	 * 
	 * sql: 
	 * <pre>DELETE      FROM         qrcode_batch      WHERE         id = ?</pre>
	 */
	public int delete(Long id) throws DataAccessException {
		return getSqlMapClientTemplate().delete("wms.QrcodeBatch.delete", id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>UPDATE         qrcode_batch      SET         state = ? ,gmt_modified = CURRENT_TIMESTAMP                  WHERE         id = ?</pre>
	 */
	public int update(QrcodeBatchDO qrcodeBatch) throws DataAccessException {
		if(qrcodeBatch == null) {
			throw new IllegalArgumentException("Can't update by a null data object.");
		}
		return getSqlMapClientTemplate().update("wms.QrcodeBatch.update", qrcodeBatch);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, batch_serial, qrcode_serial, state, gmt_create, gmt_modified                       FROM         qrcode_batch                  WHERE         id = ?</pre>
	 */
	public QrcodeBatchDO queryById(Long id) throws DataAccessException {
		return (QrcodeBatchDO)getSqlMapClientTemplate().queryForObject("wms.QrcodeBatch.queryById",id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, batch_serial, qrcode_serial, state, gmt_create, gmt_modified                       FROM         qrcode_batch                  WHERE         batch_serial = ?</pre>
	 */
	public List<QrcodeBatchDO> queryAllQRcodesByBatchSerial(String batchSerial) throws DataAccessException {
		return (List<QrcodeBatchDO>)getSqlMapClientTemplate().queryForList("wms.QrcodeBatch.queryAllQRcodesByBatchSerial",batchSerial);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, batch_serial, qrcode_serial, state, gmt_create, gmt_modified                       FROM         qrcode_batch                  WHERE         1=1                                        AND                      batch_serial = ?                                            AND                      qrcode_serial = ?                                            AND                      state = ?                                                ORDER BY         gmt_modified DESC</pre>
	 */
	public PageList<QrcodeBatchDO> queryByPage(QueryByPageQuery param) throws DataAccessException {
		return PageQueryUtils.pageQuery(getSqlMapClientTemplate(),"wms.QrcodeBatch.queryByPage",param);
	}

}

