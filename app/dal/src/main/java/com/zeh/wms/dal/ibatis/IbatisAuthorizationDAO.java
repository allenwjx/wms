/**
 * Jungle.com Inc.
 * Copyright (c) 2004-2018 All Rights Reserved.
 */ 
package com.zeh.wms.dal.ibatis;

import com.zeh.wms.dal.operation.authorization.*;
import com.zeh.wms.dal.dataobject.*;


import java.io.*;
import java.net.*;
import java.util.*;

import java.math.BigDecimal;
import java.math.BigInteger;

import com.zeh.jungle.dal.paginator.PageQuery;
import com.zeh.jungle.dal.paginator.PageList;
import com.zeh.jungle.dal.paginator.PageQueryUtils;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.zeh.wms.dal.dataobject.AuthorizationDO;
import com.zeh.wms.dal.daointerface.AuthorizationDAO;

/**
 * AuthorizationDAO
 * database table: authorization
 * database table comments: Authorization
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/dalgen</tt>
 * 
 * @author Allen Wang(Wang Junxiang)
 * */
public class IbatisAuthorizationDAO extends SqlMapClientDaoSupport implements AuthorizationDAO {


	/**
	 * 
	 * sql: 
	 * <pre>INSERT      INTO         authorization         (             id ,name ,code ,path ,enabled ,gmt_create ,gmt_modify ,create_by ,modify_by             )      VALUES         (?,?,?,?,?,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,?,?)</pre>
	 */
	public long insert(AuthorizationDO authorization) throws DataAccessException {
		if(authorization == null) {
			throw new IllegalArgumentException("Can't insert a null data object into db.");
		}
		getSqlMapClientTemplate().insert("wms.Authorization.insert", authorization);
		return authorization.getId();
	}

	/**
	 * 
	 * sql: 
	 * <pre>DELETE      FROM         authorization      WHERE         id = ?</pre>
	 */
	public int delete(Long id) throws DataAccessException {
		return getSqlMapClientTemplate().delete("wms.Authorization.delete", id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>UPDATE         authorization      SET         name = ? ,code = ? ,path = ? ,enabled = ? ,gmt_modify = CURRENT_TIMESTAMP ,modify_by = ?                  WHERE         id = ?</pre>
	 */
	public int update(AuthorizationDO authorization) throws DataAccessException {
		if(authorization == null) {
			throw new IllegalArgumentException("Can't update by a null data object.");
		}
		return getSqlMapClientTemplate().update("wms.Authorization.update", authorization);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, name, code, path, enabled, gmt_create, gmt_modify, create_by, modify_by                       FROM         authorization                  WHERE         id = ?</pre>
	 */
	public AuthorizationDO queryById(Long id) throws DataAccessException {
		return (AuthorizationDO)getSqlMapClientTemplate().queryForObject("wms.Authorization.queryById",id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, name, code, path, enabled, gmt_create, gmt_modify, create_by, modify_by                       FROM         authorization                  WHERE         id IN              (             ?                      )                      AND enabled = ?</pre>
	 */
	public List<AuthorizationDO> queryByIds(java.util.List<Long> authIds ,Integer enabled) throws DataAccessException {
		Map<String,Object> param = new HashMap<String,Object>();
		param.put("authIds",authIds);
		param.put("enabled",enabled);
		return (List<AuthorizationDO>)getSqlMapClientTemplate().queryForList("wms.Authorization.queryByIds",param);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, name, code, path, enabled, gmt_create, gmt_modify, create_by, modify_by                       FROM         authorization                  WHERE         code = ?          AND enabled = 1</pre>
	 */
	public AuthorizationDO queryByCode(String code) throws DataAccessException {
		return (AuthorizationDO)getSqlMapClientTemplate().queryForObject("wms.Authorization.queryByCode",code);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, name, code, path, enabled, gmt_create, gmt_modify, create_by, modify_by                       FROM         authorization                  WHERE         name = ?          AND enabled = 1</pre>
	 */
	public AuthorizationDO queryByName(String name) throws DataAccessException {
		return (AuthorizationDO)getSqlMapClientTemplate().queryForObject("wms.Authorization.queryByName",name);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, name, code, path, enabled, gmt_create, gmt_modify, create_by, modify_by                       FROM         authorization                  WHERE         path = ?          AND enabled = 1</pre>
	 */
	public AuthorizationDO queryByPath(String path) throws DataAccessException {
		return (AuthorizationDO)getSqlMapClientTemplate().queryForObject("wms.Authorization.queryByPath",path);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, name, code, path, enabled, gmt_create, gmt_modify, create_by, modify_by                       FROM         authorization                  WHERE         1=1                                        AND                      name = ?                                            AND                      code = ?                                            AND                      path = ?                                            AND                      enabled = ?                                                ORDER BY         gmt_modify DESC</pre>
	 */
	public PageList<AuthorizationDO> queryByPage(QueryByPageQuery param) throws DataAccessException {
		return PageQueryUtils.pageQuery(getSqlMapClientTemplate(),"wms.Authorization.queryByPage",param);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, name, code, path, enabled, gmt_create, gmt_modify, create_by, modify_by                       FROM         authorization                  WHERE         enabled = 1;</pre>
	 */
	public List<AuthorizationDO> queryAllEnabled() throws DataAccessException {
		return (List<AuthorizationDO>)getSqlMapClientTemplate().queryForList("wms.Authorization.queryAllEnabled",null);
	}

}

