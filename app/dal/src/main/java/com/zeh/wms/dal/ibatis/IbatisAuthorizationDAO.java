/**
 * Jungle.com Inc.
 * Copyright (c) 2004-2018 All Rights Reserved.
 */ 
package com.zeh.wms.dal.ibatis;

import com.zeh.wms.dal.operation.authorization.*;
import com.zeh.wms.dal.dataobject.*;


import java.io.*;
import java.net.*;
import java.util.*;

import java.math.BigDecimal;
import java.math.BigInteger;

import com.zeh.jungle.dal.paginator.PageQuery;
import com.zeh.jungle.dal.paginator.PageList;
import com.zeh.jungle.dal.paginator.PageQueryUtils;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.zeh.wms.dal.dataobject.AuthorizationDO;
import com.zeh.wms.dal.daointerface.AuthorizationDAO;

/**
 * AuthorizationDAO
 * database table: authorization
 * database table comments: Authorization
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/dalgen</tt>
 * 
 * @author Allen Wang(Wang Junxiang)
 * */
public class IbatisAuthorizationDAO extends SqlMapClientDaoSupport implements AuthorizationDAO {


	/**
	 * 
	 * sql: 
	 * <pre>INSERT      INTO         authorization         (           id ,name ,code ,path ,gmt_create ,gmt_modifeid ,create_by ,modify_by           )      VALUES         (?,?,?,?,?,?,?,?)</pre>
	 */
	public long insert(AuthorizationDO authorization) throws DataAccessException {
		if(authorization == null) {
			throw new IllegalArgumentException("Can't insert a null data object into db.");
		}
		getSqlMapClientTemplate().insert("wms.Authorization.insert", authorization);
		return authorization.getId();
	}

	/**
	 * 
	 * sql: 
	 * <pre>DELETE      FROM         authorization      WHERE         id = ?</pre>
	 */
	public int delete(Long id) throws DataAccessException {
		return getSqlMapClientTemplate().delete("wms.Authorization.delete", id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>UPDATE         authorization      SET         name = ? ,code = ? ,path = ? ,gmt_create = ? ,gmt_modifeid = ? ,create_by = ? ,modify_by = ?                WHERE         id = ?</pre>
	 */
	public int update(AuthorizationDO authorization) throws DataAccessException {
		if(authorization == null) {
			throw new IllegalArgumentException("Can't update by a null data object.");
		}
		return getSqlMapClientTemplate().update("wms.Authorization.update", authorization);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, name, code, path, gmt_create, gmt_modifeid, create_by, modify_by                  FROM         authorization                WHERE         id = ?</pre>
	 */
	public AuthorizationDO queryById(Long id) throws DataAccessException {
		return (AuthorizationDO)getSqlMapClientTemplate().queryForObject("wms.Authorization.queryById",id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, name, code, path, gmt_create, gmt_modifeid, create_by, modify_by            FROM         authorization</pre>
	 */
	public PageList<AuthorizationDO> findPage(int pageSize,int pageNum) throws DataAccessException {
		return PageQueryUtils.pageQuery(getSqlMapClientTemplate(),"wms.Authorization.findPage",null,pageNum,pageSize);
	}

}

